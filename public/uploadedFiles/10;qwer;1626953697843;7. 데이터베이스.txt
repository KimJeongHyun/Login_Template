트랜잭션
 : 데이터베이스에서 논리적인 작업을 수행하기 위한 작업의 단위

트랜잭션의 특성
 1. Atomicity : 작업은 반영되어야하거나 모두 취소되어야 한다.
 2. Consistency : 작업 전, 후와 상관없이 데이터베이스는 일관적이어야한다.
 3. Isolation : 트랜잭션 작업 중에는 다른 트랜잭션이 끼어들면 안된다.
 4. Durability : 작업이 반영되면 데이터베이스에 영구히 적용되어야 한다.

트랜잭션의 상태
 1. 활성
 2. 부분 완료
 3. 완료
 4. 실패
 5. 철회

TCL
 1. 롤백
 2. 커밋
 3. 체크포인트

병행제어 미보장시 문제점
 1. 갱신손실 : 나중에 진행된 트랜잭션이 기존의 영역을 덮어씌는 경우
 2. 현황 파악 오류 : 트랜잭션 작업 중 중간에 해당 트랜잭션을 참조하는 경우
 3. 모순성 : 두개의 트랜잭션이 동시에 처리될 때의 오류
 4. 연쇄복귀 : 트랜잭션이 데이터 영역을 공유할 때, 특정 트랜잭션의 취소시 트랜잭션이 처리한 부분을 취소하지 못하는 경우

병행제어기법
 1. 로킹 : 트랜잭션의 순차적 진행을 보장하는 기법
 2. 낙관적 검증 : 우선 트랜잭션을 처리하고, 작업이 완료된 경우 검증을 진행함
 3. 타임스탬프 : 각 트랜잭션에 타임 스탬프를 부여하여 순차적으로 진행할 수 있도록 함
 4. 다중버전 동시성 제어 : 각 트랜잭션의 타임스탬프를 고려하여 적절한 순서로 배치함

고립화 수준
 1. Read Uncomitted : 커밋되지 않은 데이터에 대한 데이터 읽기 가능
 2. Read Comitted : 커밋된 데이터에 대해서만 데이터 읽기 가능
 3. Repeatable Read : 트랜잭션 작업 중 갱신 및 삭제 제한
 4. Serializable Read : 트랜잭션 작업 중 해당 데이터 영역에 대한 접근 불허

회복기법
 1. 로그기반 회복기법 : 지연갱신기법(트랜잭션이 완료되면 갱신을 반영함), 즉각갱신기법(갱신결과를 즉시 반영함)
 2. 체크포인트 회복기법 : 특정 시간점으로 DB의 상태를 돌리는 방법
 3. 그림자페이징 회복기법 : 사본을 구비해두는 회복기법

DDL대상
 1. 도메인 : 속성이 가질 수 있는 원자값들의 집합
 2. 스키마 : 테이블의 구조 및 제약조건 등을 담은 기본적인 구조
 3. 테이블 : 행렬로 이루어진 데이터 저장 공간
 4. 뷰 : 물리적 테이블로부터 유도된 가상의 테이블
 5. 인덱스 : 검색을 편하게 해주는 데이터구조

테이블의 구조
 1. 튜플
 2. 어트리뷰트
 3. 차수 (속성갯수)
 4. 카디널리티 (튜플갯수)
 5. 도메인

인덱스의 종류
 1. 순서 인덱스 : 순서대로 부여되는 인덱스
 2. 해시 인덱스 : 해시 함수로 부여되는 인덱스
 3. 비트맵 인덱스 : 칼럼에 적은 갯수의 값이 저장되는 경우 효율적인 인덱스
 4. 함수기반 인덱스 : 함수 또는 수식에 의해 생성되는 인덱스
 5. 단일 인덱스 : 하나의 칼럼에만 생성되는 인덱스
 6. 결합 인덱스 : 두 개 이상의 칼럼이 있는 경우 생성할 수 있는 인덱스
 7. 클러스터드 인덱스 : 기본키를 기준으로 레코드를 묶어서 생성하는 인덱스

인덱스 스캔 종류
 1. 인덱스 범위 스캔 : 특정 범위의 인덱스를 스캔함
 2. 인덱스 풀 스캔 : 모든 범위의 인덱스를 스캔함
 3. 인덱스 유니크 스캔 : 수직적으로만 인덱스를 탐색함
 4. 인덱스 스킵 스캔 : 특정 주기를 생략해가며 인덱스를 탐색함


CUBE AND GROUPING SETS

CUBE(A,B) = GROUPING SETS((A,B),A,B,())

프로시저
 : 일련의 쿼리들을 하나의 함수처럼 처리할 수 있도록 하는 쿼리의 집합

트리거
 : 데이터베이스에서 삽입, 삭제, 갱신 등의 연산이 진행되었을 때 자동으로 발생되도록 하는 절차형 SQL

프로시저 구성 절차
 1. Declare
 2. Begin
 3. Control
 4. SQL
 5. Exception
 6. Transaction

사용자 정의함수
 1. Declare
 2. Begin
 3. Control
 4. SQL
 5. Exception
 6. Return

트리거
 1. Declare
 2. Event
 3. Begin
 4. Control
 5. SQL
 6. Exception

규칙기반 옵티마이저
 : 미리 정해둔 규칙에 의거해 SQL의 실행 계획을 정함

비용기반 옵티마이저
 : 통계정보로부터 모든 접근 경로를 확인한 뒤, 효율적인 실행계획을 정함

힌트
 : SQL에서 사용자가 힌트를 사용하면 해당 힌트에 따라 실행 계힉이 조정됨

