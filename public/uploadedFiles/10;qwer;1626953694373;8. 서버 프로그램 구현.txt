개발 도구의 분류
 : 빌드 도구, 구현 도구, 테스트 도구, 형상 관리 도구

서버 하드웨어 개발 환경
 1. 웹 서버 : HTTP의 요청 처리, 웹 상 정적 콘텐츠 처리
 2. 웹 어플리케이션 서버 : 웹 상 동적 콘텐츠 처리. JSP, Servlet 등.
 3. 데이터베이스 서버 : 데이터의 수집, 저장 등의 용도를 위한 서버
 4. 파일 서버 : 물리적 저장장치를 활용한 파일 저장 서버

클라이언트 하드웨어 개발 환경
 1. 클라이언트 프로그램 : 설치하여 사용하는 방식으로 사용자와 상호작용함. 
 2. 웹 브라우저 : 웹 서비스의 형태로 웹 어플리케이션 사용시 사용자와 상호작용하는 환경
 3. 모바일 웹 : 모바일 환경에서의 웹 브라우저 역할
 4. 모바일 앱 : 모바일 환경에서 설치하여 사용하는 어플리케이션.

소프트웨어 개발 환경
 1. 운영체제 : 컴퓨터 하드웨어를 사용자 입장에서 쉽게 관리하고 사용할 수 있도록 하는 SW
 2. 미들웨어 : 컴퓨터 간의 통신을 쉽고 안전하게 해주는 장치
 3. DBMS : 데이터베이스를 일괄적으로 관리하고, 사용자 측면에서 데이터를 쉽게 다룰 수 있도록 하는 시스템

형상 관리의 절차
 1. 형상 식별 : 관리 대상의 이름, 번호를 부여하고 계층적으로 관리하여 잘 수정되며 추적될 수 있도록 한다.
 2. 형상 통제 : 식별된 형상 항목에 대한 요구를 확인하여 기준선이 잘 적용될 수 있도록 한다.
 3. 형상 감사 : 기준선의 무결성을 평가한다.
 4. 형상 기록 : 형상 관리의 절차를 기록한다.

형상 관리 도구의 유형
 1. 공유 폴더 방식 ( RCS, SCCS )
 2. 클라이언트/서버 방식 ( CVS, SVN )
 3. 분산 저장소 방식 ( Git )

RCS
 : CVS와 달리 권한을 가진 한 사용자만 접근할 수 있도록 하는 공유 폴더 접근 방식

CVS
 : 다수의 사용자가 저장소에 접근하여 관리할 수 있도록 하는 방식

SVN
 : 하나의 서버에서 쉽게 관리할 수 있도록 하는 클라이언트 / 서버 방식

Git
 : 분산형 버전 관리 시스템, 대형 프로젝트에 적합함

Clear Case
 : 복수 클라이언트/서버 구조로 필요할 때마다 꺼내어 쓸 수 있도록 하는 구조.

모듈
 : 그 자체로 SW의 특정 기능을 수행할 수 있는 독립된 객체.

모듈화의 기법
 1. 루틴 : 특정 동작을 수행하는 코드들의 모임
 2. 메인 루틴 : 프로그램의 주요 부분으로 대략적인 절차를 명시함. 서브 루틴을 호출.
 3. 서브 루틴 : 메인 루틴이 필요할 때 호출되는 루틴

응집도
 : 모듈 내부 구성 요소간의 연관 정도를 나타내는 척도

응집도의 유형
 1. 우연적 응집도 : 내부 구성요소간 연관성이 없는 경우
 2. 논리적 응집도 : 유사한 성격을 갖거나 특정 분야로 분류되는 처리요소들이 어떠한 모듈에서 처리될 때의 응집도
 3. 시간적 응집도 : 특정한 시간에 실행되어야하는 기능들이 한 모듈에서 처리될 때의 응집도
 4. 절차적 응집도 : 모듈 내에 여러가지 기능들이 있을 때 그것이 순차적으로 처리될 때의 응집도
 5. 통신적 응집도 : 동일한 입출력을 사용하는 여러 다른 기능들이 모듈에 모여있을 때의 응집도
 6. 순차적 응집도 : 어떠한 모듈의 출력값이 다른 활동의 입력값으로 사용될 경우의 응집도
 7. 기능적 응집도 : 모듈 내의 모든 구성요소가 단일한 기능을 위해 사용되는 경우의 응집도

결합도
 : 모듈  간의 상호 연관성

결합도의 유형
 1. 내용 결합도 : 다른 모듈에 있는 기능을 그대로 사용하는 경우
 2. 공통 결합도 : 외부 전역변수를 공통적으로 참조하여 해당 변수의 변경에 의해 모듈이 상호작용되는 경우
 3. 외부 결합도 : 외부의 인터페이스를 통해 데이터 포맷, 통신 프로토콜 등이 교환되는 경우
 4. 제어 결합도 : 단순한 구성요소가 아닌 제어를 위한 처리 요소가 교환되는 경우
 5. 스탬프 결합도 : 인터페이스를 통해 객체, 메서드 등의 파라미터가 전달되는 경우
 6. 자료 결합도 : 파라미터를 통해서만 요소를 전달할 수 있는 경우

응집도와 결합도
 : 응집도가 높고 결합도가 낮아야 모듈의 독립성이 강하다고 할 수 있다.

공통 모듈 구현 절차
 1. DTO/VO
 2. SQL
 3. DAO
 4. Service
 5. Controller

MVC 패턴
 : Model, View, Controller 가지 시점의 구성요소를 통해 구조를 설계하는 기법.
  Model : 어플리케이션의 기능에 대한 명세
  View : 사용자의 시점에 어떻게 보이는지에 대한 명세
  Controller : 모델이 어떻게 처리될지에 대한 명세

팬인/팬아웃
 1. 팬인 : 어떠한 모듈을 호출하는 모듈의 갯수
 2. 팬아웃 : 어떠한 모듈에 의해 호출되는 모듈의 갯수

공통 모듈 테스트
 1. 화이트박스 테스트 : 내부 소스 코드를 아는 상태에서 진행하는 테스트로 코드의 결함 및 기능의 논리적 흐름 등에 집중함
 2. 메서드 기반 테스트 : 외부에 공개된 메서트를 통해 시행하는 테스트
 3. 화면 기반 테스트 : 사용자의 화면 단위로 단위 모듈을 개발하고, 직접 화면에 데이터를 넣어가며 진행하는 테스트
 4. 테스트 드라이버/스텁 : 구현된 화면이나 모듈이 없는 경우, 테스트 드라이버 또는 스텁을 사용함.

JUnit
 : 자바 프로그래밍 언어를 위한 공통 모듈 테스트 도구

백엔드
 : 화면의 뒷편에서 어플리케이션의 기능이나 로직 등을 처리하는 영역. DB나 인터페이스에 접근한다.

프론트엔드
 : 화면에서 사용자와 상호작용하는 영역으로 주로 웹 페이지를 그리는 기술을 담당함

DTO/VO -> SQL -> DAO -> Service -> Controller
 1. DTO/VO : 사용자가 입력한 정보를 받아 다룰 수 있는 값 객체로 만듦.
 2. SQL : 받아온 값 객체들이 어떤 방식으로 DB에 다뤄질지 SQL 구문을 작성
 3. DAO : 데이터 접근 객체를 통해 입력된 정보에 대한 SQL 작업 수행
 4. Service : 수행될 기능에 접근시키기 위한 서비스 클래스
 5. Controller : 기능의 메인 로직을 작성함

배치 프로그램
 : 사용자와의 상호작용 없이 하나 이상의 작업을 순차적으로 처리할 수 있고, 정기적 또는 일괄적으로 처리할 수 있는 프로그램.

배치 프로그램의 종류
 1. 이벤트 배치 : 특정한 이벤트가 발생하면 실행됨
 2. 온디멘드 배치 : 사용자의 요청에 의해 실행됨
 3. 정기 배치 : 정해진 시간마다 실행됨

배치 스케줄러
 : 일괄적으로 발생하거나, 정기적으로 발생하는 배치 프로그램의 작업을 지원하는 도구

스프링 배치
 : 스프링 프레임워크의 모든 기능을 사용할 수 있는 스케줄러

쿼츠 스케줄러
 : 스프링 프레임워크에 플러그인되어있고, 작업과 트리거를 분리하여 유연성을 제공하는 스케줄러.

쿼츠-크론 표현식
 : 초/분/시/일/월/요/연 연도는 생략 가능.

크론 표현식
 : 분/시/일/월/요/연 연도는 생략 가능

CRON 특수문자의 의미
 1. * : 모든 수
 2. ? : 해당 항목 미사용
 3. - : 기간 설정
 4. , : 특정 기간 설정
 5. / : 시작시간 및 반복시간 설정
 6. L : 마지막 기간에 동작
 7. W : 가장 가까운 평일에 동작
 8. # : 몇번째 주 또는 요일 설정

