생명주기 모델 프로세스
 1. 요구사항 분석
 2. 설계
 3. 구현
 4. 테스트
 5. 유지보수

생명주기 모델 종류
 1. 폭포수 모델 : 절차적으로 단계를 밟아나가며 개발해나가는 모델
 2. 프로토타입 모델 : 시제품을 개발하여 사용자의 피드백을 받는 모델
 3. 나선형 모델 : 위험을 최소화하기 위해 점진적으로 개발해나가는 모델
 4. 반복적 모델 : 병렬적으로 개발하여 통합하거나 반복적으로 개발해나가는 모델

개발방법론 종류
 1. 구조적 방법론 : 프로그램의 기능에 집중하고 분할과 정복 접근 방식을 사용함
 2. 정보공학적 방법론 : 정보시스템 개발에 필요한 관리 절차 및 작업 방식을 체계화함
 3. 객체기반 방법론 : 객체 개념을 기반으로 개발을 진행함
 4. 컴포넌트 방법론 : 각 기능을 수행하는 컴포넌트를 조립하여 소프트웨어를 만드는 것
 5. 애자일 방법론 : 기능에 집중하며, 절차보다 사람을 중심으로 하는 방법론
 6. 제품 계열 방법론 : 특정 계열의 제품에 집중하여 공통된 기능을 개발하는 방법론

XP
 : 의사소통과 즉각적 피드백을 통해 소프트웨어 품질을 높이는 방법론.
 1. 용기
 2. 단순성
 3. 의사소통
 4. 피드백
 5. 존중

스크럼
 : 매일 정해진 시간, 장소에서 짧은 개발을 진행하는 것
 1. 백로그 : 제품과 프로젝트에 대한 요구사항
 2. 스프린트 : 2~4주 동안 짧은 개발 기간을 통해 소프트웨어 품질 향상
 3. 스크럼 미팅 : 매일 15분 동안 ToDoList 계획 수립
 4. 스크럼 마스터 : 스프린트 리더
 5. 스프린트 회고 : 스프린트 기간 동안 규칙 준수 여부, 개선점 등 기록
 6. 번다운 차트 : 남아있는 백로그 대비 시간을 그래픽적으로 표현한 것.

비용산정모델
 1. 하향식 : 전문가에게 비용산정의 판단을 맡기는 모델.
  : 전문가 판단, 델파이 기법
 2. 상향식 : 세부적인 요구사항, 기능에 따라 비용산정을 진행함.
  : LOC, Man-Month, COCOMO, FUTNAM, FP

LoC
 : 소스 코드에서 낙관치, 중간치, 비관치를 계산하여 비용산정하는 모델. 낙관치+4*중간치+비관치 / 6

Man Month
 : 한 개발자가 한달에 얼마만큼의 일을 할 수 있는지에 대해 계산하는 모델.
 LoC / 프로그래머 월간 생산성 = Man Month
 Man Month / 프로젝트 인력 = 프로젝트 기간

COCOMO
 : 보헴이  고안한 조직의 규모에 따른 비용 산정 모델
 1. Organic(조직형) Mode : 5만 라인 이하의 소프트웨어를 개발하는 유형
 2. Semi-Detached(반 분리형) Mode : 30만 라인 이하의 SW
 3. Embedded(임베디드형) Mode : 30만 라인 이상의 SW

Futnam
 : 소프트웨어 개발 단계별 인력 분포를 가정한 모델. Rayleigh-Nordan 노력 분포도를 기초로 함.

FP
 : 기능 점수 모델. 각 기능별로 가중치를 부여하고 합산하여 비용을 산정하는 모델.

주 공정법
 : 여러가지 수행 순서가 있는 프로젝트의 일정에서, 가장 긴 시간이 걸리는 경로를 계산한다.

PERT
 : 낙관, 중간, 비관 3점 추정방식을 이용한 일정 관리 기법

중요 연쇄 프로젝트 관리
 : 주 공정법을 기반으로 자원제약사항을 확인하여 일정을 작성하는 기법

현행 시스템 파악
 : 현행 시스템이 어떤 하위 시스템으로 구성되어 있는지, 기능 및 연계정보와 기술요소를 파악하는 활동. 소프트웨어와 하드웨어의 구성과 네트워크 구성도를 파악한다.

소프트웨어 아키텍쳐
 : 소프트웨어를 구성하는 구성요소들, 그 중 외부에 드러나는 구성요소와 그 사이의 관계를 표현한 시스템 구조

소프트웨어 아키텍쳐의 4+1 뷰
 1. 유스케이스 뷰 : 유스케이스 및 아키텍쳐를 구성하고 도출함. 사용자와 개발자의 뷰
 2. 논리 뷰 : 시스템의 기능적 요구사항을 표현함. 설계자와 개발자의 뷰
 3. 프로세스 뷰 : 시스템의 비기능적인 부분을 표현함. 병행 작업, 이벤트 처리, 자원의 효율적인 사용 등. 시스템 통합자와 개발자의 뷰
 4. 구현 뷰 : 개발 환경 내에서 정적인 모듈의 구성을 표현한 뷰.
 5. 배포 뷰 : 컴포넌트가 물리적인 아키텍쳐에 어떻게 구성되어 있는지 매핑하여 표현한 뷰

소프트웨어 아키텍쳐 패턴
 1. 계층화 패턴 : 시스템을 계층으로 나눠 표현하는 패턴
 2. 클라이언트/서버 패턴 : 하나의 서버, 다수의 클라이언트로 구성된 패턴
 3. 파이프-필터 패턴 : 데이터 스트림을 생성하고 처리하는 시스템에서 사용되는 패턴
 4. 브로커 패턴 : 컴포넌트로 구성되며, 각 컴포넌트가 원격으로 상호작용되는 패턴
 5. MVC 패턴

소프트웨어 아키텍쳐 비용 평가 모델 종류
 1. SAAM : 변경용이성과 기능성에 집중한 모델
 2. ATAM : 아키텍쳐 품질 속성을 만족하는지에 집중한 모델
 3. CBAM : ATAM을 기반으로, 경제적 의사결정을 충족하는지 평가하는 모델
 4. ADR : 소프트웨어 아키텍쳐의 응집도를 평가함
 5. ARID : 특정 부분의 품질요소를 만족하는지 평가함

DBMS
 : 데이터들의 집합을 만들고 저장 및 관리를 지원하는 시스템

DBMS 현행 시스템 분석의 요구사항
 1. 가용성
 2. 성능
 3. 호환성
 4. 기술지원
 5. 구축비용

미들웨어
 : 분산 컴퓨팅 환경에서 두 프로그램 간 원할한 통신을 도와주는 소프트웨어

웹 어플리케이션 서버
 : 웹 상에서 어플리케이션이 정상적으로 동작하도록 지원하며, 트랜잭션의 처리와 관리 및 이기종 시스템에서의 호환성을 제공함.

요구공학
 : 사용자의 요구사항에 맞춰 시스템을 개발하기 위해 사용자의 요구사항을 도출, 분석, 명세, 확인 및 검증하는 구조화된 활동

요구사항 개발 단계
 1. 도출
 2. 분석
 3. 명세
 4. 확인 및 검증

요구사항 관리 단계
 1. 요구사항 협상
 2. 요구사항 기준선 설정
 3. 요구사항 변경 관리
 4. 요구사항 확인 및 검증 

델파이 기법
 : 전문가의 지식을 통한 문제 해결 및 미래 예측

요구사항 분석 단계
 1. 요구사항 분류
 2. 개념 모델링 생성 및 분석
 3. 요구사항 할당
 4. 요구사항 협상
 5. 정형 분석

요구사항 명세원리 및 검증 항목
 1. 명확성
 2. 완전성
 3. 검증 가능성
 4. 일관성
 5. 수정 용이성
 6. 추적 가능성
 7. 개발 후 이용성

정형 기술 검토의 종류
 1. 동료 검토 : 2~3명의 이해관계자끼리 진행하며, 요구사항 작성자의 설명을 들으며 리뷰를 진행함
 2. 워크 스루 : 사전에 검토 자료를 확인하고 짧은 회의 시간 동안 리뷰를 진행함
 3. 인스펙션 : 개발자/저작자 외 전문가로부터 리뷰받는 방법

